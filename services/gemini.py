import os
import logging
import google.generativeai as genai
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

def configure_gemini():
    """
    Configures the Google Generative AI client with the API key from environment variables.
    Raises:
        ValueError: If the GEMINI_API_KEY is not found in the environment.
    """
    api_key = os.getenv("GEMINI_API_KEY")
    if not api_key:
        raise ValueError("GEMINI_API_KEY not found. Please set it in your .env file or as an environment variable.")
    genai.configure(api_key=api_key)

def generate_summary_stream(transcript_text: str, summary_language: str = 'en'):
    """
    Generates a summary from the given transcript text using the Gemini API and streams the response.
    Args:
        transcript_text: The full text of the video transcript.
        summary_language: The language for the generated summary.
    Yields:
        A stream of summary text chunks as they are generated by the model.
    """
    # Using Gemini 1.5 Flash - it's fast, has a large context window, and is cost-effective.
    model = genai.GenerativeModel('gemini-1.5-flash')

    prompt = f"""
    Please provide a comprehensive, well-structured summary of the following video transcript.

    **The summary must be written in {summary_language}.**

    Your summary should:
    1. Be approximately 300-400 words long.
    2. Start with a concise one-sentence overview of the video's main topic.
    3. Identify and clearly explain the key points, arguments, or topics discussed. 
       Use bullet points or numbered lists for clarity where appropriate.
    4. Maintain a neutral, objective tone.
    5. Capture the essential information and core message accurately.
    6. Be well-written, coherent, and easy to understand.

    Here is the transcript:
    ---
    {transcript_text}
    ---
    """

    try:
        stream = model.generate_content(prompt, stream=True)
        for chunk in stream:
            if chunk.text:
                yield chunk.text
    except Exception as e:
        logging.error(f"Gemini API Error during streaming generation: {e}")
        # Yield a descriptive error message to be displayed to the user
        yield f"Error generating summary: {e}" 